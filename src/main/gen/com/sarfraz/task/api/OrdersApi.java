/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sarfraz.task.api;

import com.sarfraz.task.model.OrderRequest;
import com.sarfraz.task.model.OrderResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-03T16:26:22.933846+05:30[Asia/Calcutta]")
@Validated
@Api(value = "orders", description = "the orders API")
public interface OrdersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /orders/values : Returns the total order value
     *
     * @param orderRequest  (required)
     * @return Total value of the order (status code 200)
     *         or Internal Server error if service is not functioning (status code 500)
     *         or Bad request (status code 400)
     *         or Unprocessable entity in case offer value cannot be processed (status code 422)
     */
    @ApiOperation(value = "Returns the total order value", nickname = "getOrderValue", notes = "", response = OrderResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Total value of the order", response = OrderResponse.class),
        @ApiResponse(code = 500, message = "Internal Server error if service is not functioning", response = String.class),
        @ApiResponse(code = 400, message = "Bad request", response = String.class),
        @ApiResponse(code = 422, message = "Unprocessable entity in case offer value cannot be processed", response = String.class) })
    @PostMapping(
        value = "/orders/values",
        produces = { "application/json", "text/plain" },
        consumes = { "application/json" }
    )
    default ResponseEntity<?> getOrderValue(@ApiParam(value = "" ,required=true )  @Valid @RequestBody OrderRequest orderRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"order_total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
